<?php


namespace DigitalAscetic\BaseUserBundle\Tests\Functional;


use DigitalAscetic\BaseUserBundle\Tests\Entity\TestUser;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\SchemaTool;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class ResetUserPasswordTest extends WebTestCase
{

    /**
     * @var EntityManagerInterface
     */
    private $em;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::bootKernel();

        $this->em = static::$kernel->getContainer()
            ->get('doctrine.orm.entity_manager');

        $this->importDatabaseSchema();

        $testUser = new TestUser();
        $testUser->setUsername('test');
        $testUser->setEmail('test@test.com');

        /** @var UserPasswordEncoderInterface $encoder */
        $encoder = static::$kernel->getContainer()
            ->get('security.password_encoder');

        $testUser->setPassword($encoder->encodePassword($testUser, 'piripino9030'));
        $this->em->persist($testUser);
        $this->em->flush();
    }

    public function testResetPasswordRequest()
    {
        $client = $this->requestResetPassword();

        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());

        /** @var TestUser $user */
        $user = $this->em->getRepository(TestUser::class)->findOneBy(['email' => 'test@test.com']);

        $token = $user->getPasswordRequestToken();

        $this->assertNotNull($token);
    }

    public function testResetPasswordConfirm()
    {
        $client = $this->requestResetPassword();

        /** @var TestUser $user */
        $user = $this->em->getRepository(TestUser::class)->findOneBy(['email' => 'test@test.com']);

        $token = $user->getPasswordRequestToken();

        $crawler = $client->request('GET', '/reset_password/confirm/'.$token);

        // you can also pass an array of field values that overrides the default ones
        $form = $crawler->filter('form')->form(
            [
                'ascetic_base_user_reset_password[password][first]' => '12345678',
                'ascetic_base_user_reset_password[password][second]' => '12345678',
            ]
        );

        // submit the Form object
        $client->submit($form);

        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());

        $this->em->clear();

        /** @var TestUser $user */
        $user = $this->em->getRepository(TestUser::class)->findOneBy(['email' => 'test@test.com']);

        $token = $user->getPasswordRequestToken();

        $this->assertNull($token);
    }

    private function requestResetPassword()
    {
        self::ensureKernelShutdown();
        $client = self::createClient();

        $crawler = $client->request('GET', '/reset_password');

        // you can also pass an array of field values that overrides the default ones
        $form = $crawler->filter('form')->form(
            [
                'ascetic_base_user_reset_password_request[email]' => 'test@test.com',
            ]
        );

        // submit the Form object
        $client->submit($form);

        return $client;
    }

    private function importDatabaseSchema()
    {
        $metadata = $this->em->getMetadataFactory()->getAllMetadata();
        if (!empty($metadata)) {
            $schemaTool = new SchemaTool($this->em);
            $schemaTool->dropDatabase();
            $schemaTool->createSchema($metadata);
        }
    }
}