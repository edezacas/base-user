<?php


namespace DigitalAscetic\BaseUserBundle\Tests\Functional;


use DigitalAscetic\BaseUserBundle\Tests\Entity\TestUser;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\SchemaTool;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class BaseUserTest extends WebTestCase
{

    /**
     * @var EntityManagerInterface
     */
    private $em;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::bootKernel();

        $this->em = static::$kernel->getContainer()
            ->get('doctrine.orm.entity_manager');

        $this->importDatabaseSchema();

        $testUser = new TestUser();
        $testUser->setUsername('test');
        $testUser->setEmail('test@test.com');

        /** @var UserPasswordEncoderInterface $encoder */
        $encoder = static::$kernel->getContainer()
            ->get('security.password_encoder');

        $testUser->setPassword($encoder->encodePassword($testUser, 'piripino9030'));
        $this->em->persist($testUser);
        $this->em->flush();
    }

    public function testByUsername()
    {
        self::ensureKernelShutdown();
        $client = self::createClient();

        $client->request(
            'POST',
            '/login_check',
            ['_username' => "test", "_password" => "piripino9030"]
        );
        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());
    }

    public function testByEmail()
    {
        self::ensureKernelShutdown();
        $client = self::createClient();

        $client->request(
            'POST',
            '/login_check',
            ['_username' => "test@test.com", "_password" => "piripino9030"]
        );
        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());
    }

    public function testLoginFailure()
    {
        self::ensureKernelShutdown();
        $client = self::createClient();

        $client->request(
            'POST',
            '/login_check',
            ['_username' => "test@test.com", "_password" => "piripino9031"]
        );

        $this->assertSame(Response::HTTP_UNAUTHORIZED, $client->getResponse()->getStatusCode());
    }

    public function testLoginAndSerializer()
    {
        self::ensureKernelShutdown();
        $client = self::createClient();

        $client->request(
            'POST',
            '/login_check',
            ['_username' => "test@test.com", "_password" => "piripino9030"]
        );
        $this->assertSame(Response::HTTP_OK, $client->getResponse()->getStatusCode());

        $message = $client->getResponse()->getContent();
        $content = json_decode($message);
        $this->assertNotNull($content);
        $this->assertNotNull($content->user);
        $this->assertEquals(1, $content->user->id);
    }


    private function importDatabaseSchema()
    {
        $metadata = $this->em->getMetadataFactory()->getAllMetadata();
        if (!empty($metadata)) {
            $schemaTool = new SchemaTool($this->em);
            $schemaTool->dropDatabase();
            $schemaTool->createSchema($metadata);
        }
    }
}